Item 67. 최적화는 신중히 하라

성능 때문에 견고한 구조를 희생하지 말자. 빠른 프로그램보다는 좋은 프로그램을 작성하라.
좋은 프로그램을 작성하다보면 정보은닉 원칙을 따르므로 개별 구성요소의 내부를 독립적으로 설계할 수 있다.
따라서 시스템의 나머지에 영향을 주지 않고도 각 요소를 다시 설계할 수 있다.
그렇다고 성능 문제를 무시하라는 뜻이 아니고, 완성된 설계의 기본 틀을 변경하려다 보면 유지보수하거나 개선하기 어려운 꼬인 구조의 시스템이 만들어지기 때문에 염두에 두고 프로그램을 작성하라는 뜻이다.

성능을 제한하는 설계는 피하라.
완성후 변경하기가 가장 어려운 설계 요소는 컴포넌트끼리, 혹은 외부 시스템과의 소통 방식이다. (API, 네트워크 프로토콜, 영구 저장용 데이터 포맷 등)
이런 설계 요소들은 완성후에는 변경하기 어렵거나 불가능할 수 있으며, 동시에 시스템 성능을 심각하게 제한할 수 있다.
API를 설계할 때 성능에 주는 영향을 고려하라.

public을 사용하여 내부 데이터를 변경할 수 있게 만들면 불필요한 방어적 복사를 수없이 유발할 수 있다.
또한 컴포지션으로 해결할 수 있음에도 상속방식을 사용하면 상위 클래스에 영원히 종속되어 성능 제약을 일으킬 수 있다.
그리고 인터페이스도 있는데 굳이 구현 타입을 사용하여 나중에 더 좋은 구현체를 사용 못하는 경우가 있기 때문에 인터페이스를 사용하는 것이 좋다.

성능을 위해 API를 왜곡하는 건 매우 안 좋은 생각이다.
API 설계가 성능에 주는 영향은 현실적인 문제지만, 다행히 잘 설계된 API는 성능도 좋은 게 보통이다.
하지만 API를 왜곡하도록 만들면, 이전 API가 성능 문제는 해당 플랫폼이나 아랫단 소프트웨어의 다음 버전에서 변경 시 해당 왜곡된 API는 고통이 영원히 따라갈 것이다.
