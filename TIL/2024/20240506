item10 equals는 일반 규약을 지켜 재정의 하라

꼭 필요한 경우가 아니면 `equals`를 재정의하지 말자. 
- `Object`의 `equals`가  대부분 경우에서 원하는 비교를 정확히 수행해준다.

equal 메서드를 재정의 해아한다면???

1. == 연산자를 사용해 입력이 자기 자신의 참조인지 확인한다.
- 자기 자신이면 true를 반환한다.

2. instanceof 연산자로 입력이 올바른 타입인지 확인한다.
- 그렇지 않다면 false를 반환한다.

3. 입력을 올바른 타입으로 형변환한다.
- 2번에서 instanceof 검사를 했기 때문에 이 단계는 100% 성공한다.

4. 입력 객체와 자기 자신의 대응되는 '핵심'필드들이 모두 일치하는지 하나씩 검사한다.
- 모든 필드가 일치하면 true, 하나라도 다르면 false를 반환한다

잘 구현된 예제
```
public class PhoneNumber {
    private final short areaCode, prefix, lineNum;

    public PhoneNumber(int areaCode, int prefix, int lineNum) {
        this.areaCode = rangeCheck(areaCode, 999, "지역코드");
        this.prefix = rangeCheck(prefix, 999, "프리픽스");
        this.lineNum = rangeCheck(lineNum, 9999, "가입자 번호");
    }

    private static short rangeCheck(int val, int max, String arg) {
        if(val < 0 || val > max) {
            throw new IllegalArgumentException(arg + ": " + val);
        }
        return (short) val;
    }

    @Override
    public boolean equals(Object o) {
        if(o == this) {
            return true;
        }

        if(!(o instanceof PhoneNumber)) {
            return false;
        }

        PhoneNumber pn = (PhoneNumber) o;
        return pn.lineNum == lineNum && pn.prefix == prefix
                && pn.areaCode == areaCode;
    }
}
```
