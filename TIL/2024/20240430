item7 다 쓴 객체는 참조를 해제하라
c, c++ 처럼 메모리를 직접관리하지 않더라도 메모리를 신경써야한다.

해당 참조를 다 썼을 때 null처리를 하면된다.

```
public Object pop() {
	if (size == 0){
		throw new EmptyStackException();
	Oject result = element[--size];
	element[size] = null; // 다 쓴 참조 해제
	return result;
}
```

**메모리를 직접 관리할 때**, 
`Stack` 구현체처럼 `elements`라는 배열을 관리하는 경우에 GC는 어떤 객체가 필요 없는 객체인지 알 수 없으므로, 
해당 레퍼런스를 `null`로 만들어 GC한테 필요없는 객체들이라고 알려줘야 한다.

캐시를 사용할 때도 메모리 누수 문제를 조심해야 한다. 객체의 레퍼런스를 캐시에 넣어 놓고, 캐시를 비우는 것을 잊기 쉽다. 여러 가지 해결책이 있지만, 
**캐시의 키**에 대한 레퍼런스가 캐시 밖에서 필요 없어지면 해당 엔트리를 캐시에서 자동으로 비워주는 `WeakHashMap`을 쓸 수 있다.

클라이언트 코드가 콜백을 등록할 수 있는 API를 만들고 콜백을 뺼 수 있는 방법을 제공하지 않는다면, 계속해서 콜백이 쌓이기만 할 것이다. 
이것 역시 `WeakHashMap`을 사용해서 콜백을 Weak 레퍼런스로 저장하면 GC가 이를 즉시 수거해 해결할 수 있다.
