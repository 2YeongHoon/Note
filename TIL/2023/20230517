단위테스트

단위테스트는 엔지니어의 일상에서 비중이 크기 때문에 구글은 ‘테스트 유지보수성’을 매우 중요시 함.(반복하여 실행시켜야하기 때문)
유지보수하기 쉬운 테스트란? 한 번 작성해두면 테스트가 실패하지 않는 한 엔지니어가 신경쓸 필요 없고, 혹 실패한다면 원인을 바로 알 수 있는 진짜 버그를 찾는 테스트. 
이번 장에서는 유지보수성이란 무엇인지와 높은 유지보수성을 달성하는 기법들에 대해서 설명.

구글에서 말하는 단위 테스트란?

단일 클래스나 메서드처럼 범위가 상대적으로 좁은 테스트.

테스트의 목적
1. 버그예방
2. 엔지니어의 생산성 개선

단위테스트의 목표

유지보수하기 쉬워야 함.

테스트코드에 무슨기능을 어떻게 검사하려고 했는지 이해 가능해야함.

무엇이 잘못되어 실패했는 지 여부 확인 가능해야함.

깨지기 쉬운 테스트를 예방해야 함

깨지기 쉬운 테스트란?

실제로 버그가 없음에도, 심지어 검증 대상 코드와는 관련조차 없는 변경 때문에 실패하는 테스트.

 

높은 유지보수성을 달성하는 기법

깨지기 쉬운 테스트를 피하는 패턴

순수 리팩터링

외부 인터페이스는 놔두고 내부만 리팩터링 한다면 테스트는 변경되지 않아야 함.

새로운 기능 추가

새로운 기능이나 행위를 추가할 때는 기존 행위들에 영향을 주지 않아야 함.

새로운 기능을 추가했는데 테스트코드가 변경이 되어야한다면 테스트 자체에 문제가 있음.

버그 수정

버그 수정 때도 통상적으로 기존 테스트들은 변경되지 않아야 함.

행위 변경

시스템의 기존 행위를 변경하는 경우라면, 기존 테스트는 변경이 되어야함.

은행거래 API


public void processTransaction(Transaction transaction) {
    if(isValid(transaction)) {
        saveToDatabase(transaction);
    }
}
private boolean isValid(Transaction t) {
    return t.getAmount() < t.getSender().getBalance();
}
private void saveToDatabase(Transaction t) {
    String s = t.getSender() + "," + t.getRecipient() + "," + t.getAmount();
    database.put(t.getId(), s);
}
public void setAccountBalance(String accountName, int balance) {
    // 잔고를 데이터베이스에 저장 
}
public void getAccountBalance(String accountName) {
    // 계좌 잔고를 확인하기 위해 데이터베이스로부터 거래 정보를 읽어온다.
}
위 와같은 코드를 테스트하기 위해 굳이 private 메소드를 public으로 변경하여 테스트하지 않는다.

1. 상호작용 테스트(깨지기 쉬움): 호출을 처리하는 과정에서 시스템이 다른 모듈들과 협력하여 기대한 일련의 동작을  수행하는 지 확인.


@Test
public void shouldWriteToDatabase() {
    accounts.createUser("foobar");
    verify(database).put("foobar"); // 데이터베이스의 put()메서드가 호출되었는 지 확인.
}
2. 상태 테스트: 메서드 호출 후 시스템 자체를 관찰


@Test
public void shouldCreateUsers() {
    accounts.createUser("foobar");
    assertThat(accounts.getUser("foobar")).isNotNull();
}
 

깨지기 쉬운 요소를 완전히 제거 하더라도 테스트는 언젠간 실패.

명확한 테스트라 함은 존재의 이유와 실패의 원인을 엔지니어가 곧바로 차릴 수 있는 테스트

불완전하고 산만한코드 ( 생성자에 불필요한 정보가 많고, newTestCalculation의 역할을 알기 어려움 )


@Test
public void shouldPerformAddition() {
    Calculator calculator = new Calculator(new RoundingStrategy(), "unused", ENABLE_COSINE_FEATURE, 0.01, calculusEngine, false);
    int result = calculator.calculate(newTestCalculation());
    assertThat(result).isEqualTo(5);
}
 2. 완전하고 간결한 테스트


@Test
public void shouldPerformAddition() { 
    Calculator calculator = newCalculator();
    int result = calculator.calculate(newCalculation(2, Operation.PLUS, 3));
    assertThat(result).isEqualTo(5);
}
테스트 코드에서는 DRY(Don't Repeat Yourself, 반복줄이기) 원칙을 거스르는게 나을 때가 많음.

메서드 하나가, 하나의 행위를 수행하지 않는 경우가 많음.

메서드 단위로 테스트코드 작성 시, 코드 변경에 따라 테스트 코드도 복잡해짐.

1. 메서드 중심 테스트


@Test
public void testDisplayTransactionResults() {
transactionProcessor.displayTransactionResults(newUserWithBalance(LOW_BALANCE_THRESHOLD.plus(dollars(2))), new Transaction("물품", dollars(3)));
    assertThat(ui.getText()).contains("물품을 구입하셨습니다.");
    assertThat(ui.getText()).contains("잔고가 부족합니다.");
}
2. 행위 주도 테스트


@Test
public void displayTransactionResults_showsItemName() {
    transactionProcessor.displayTransactionResults(new User(), new Transaction("Some Item"));
    assertThat(ui.getText()).contains("물품을 구입하셨습니다.");
}

@Test
public void displayTransactionResults_showsLowBalanceWarning() {
    transactionProcessor.displayTransactionResults(newUserWithBalance(LOW_BALANCE_THRESHOLD.plus(dollars(2))), new Transaction("Some Item", dollars(3)));
    assertThat(ui.getText()).contains("잔고가 부족합니다.");
}
given(설정 정의), when(작업 수행 정의), then(작업 검증)을 활용하자

경우에 따라 and 접속사나, 단계별 검증을 위해서 when과 then을 교차사용한다면 읽기쉬운 테스트가 됨.


@Test
public void transferFundsShouldMoveMoneyBetweenAccounts() {
    // Given: 두 개의 계좌. 각각 잔고는 $150과 $20
    Account account1 = newAccountWithBalance(usd(150));
    Account account2 = newAccountWithBalance(usd(20));
    
    // When: 첫 번째 계좌에서 두 번째 계좌로 $100이체
    bank.transferFunds(account1, account2, usd(100));
    
    // Then: 각 계좌 잔고에 이체 결과가 반영됨
    assertThat(account1.getBalance()).isEqualTo(usd(50));
    assertThat(account2.getBalance()).isEqualTo(usd(120));
}
테스트 코드에서 메서드 이름은 의도를 표현하는 가장 간단한 방법

제품에 들어갈 코드라면 추천하지 않을 상세한 이름이지만, 호출하지 않음으로 최대한 정보를 넣어 표현하는 것이 좋음

multiplyingTwoPositiveNumbersShouldReturnAPositiveNumber

multiply_postiveAndNegative_returnsNegative

divide_byZero_throwsException

좋은 전략이 떠오르지 않으면 ‘should' 활용

테스트 이름에 ‘and’가 들어있다면 여러 행위를 검사하고 있을 가능성이 크다고 인지하고, 테스트를 분리한다.

프로덕션 코드는 복잡하기때문에 이를 위한 검증 테스트 코드를 작성하는 것은 당연.

하지만 테스트 코드에는 사치이며, 테스트 코드를 위한 테스트 를 작성해야할 것 같은 느낌이 든다면 잘못 됨을 감지해야함.

논리가 버그를 감추는 예


@Test
public void shouldNavigateToAlbumsPage() {
    String baseUrl = "http://photos.google.com/";
    Navigator nav = new Navigator(baseUrl);
    nav.goToAlbumPage();
    assertThat(nav.getCurrentUrl()).isEqualTo(baseUrl + "/albums");
}
2. 논리를 제거하니 버그가 들어남.


@Test
public void shouldNavigateToPhotosPage() {
    Navigator nav = new Navigator("http://photos.google.com/");
    nav.goToPhotosPage();
    assertThat(nav.getCurrentUrl())).isEqualTo("http://photos.google.com//albums"); // "//"가 2번호출
}
위 사례로 테스트 코드에서는 스마트한 로직보다 직설적인 코드를 사용하는 것이 좋으며, 서술적이고 의미있는 코드를 위해서 약간의 중복을 허용하는 것이 좋음.

명확성을 높이기 위해서 테스트를 실패했을 때 엔지니어가 명확한 메시지를 받아봐야함.

잘 작성된 실패 메시지라면 테스트의 이름과 거의 동일한 정보를 담고 있어야함.

‘원하는 결과’, ‘실제 결과', ‘이때 건네진 매개변수 값’을 알려줘야함.


// 좋지않음.
Test failed: account is closed

// 좋음.
Expected an account in state CLOSED, but got account:
<{name: "my-account", state: "OPEN"}
DRY를 고집하기보다 DAMP(Descriptive And Meaningful Phrase)가 되도록 노력해야 함.

단순하고 명료하게 만들어준다면 다소의 중복은 괜찮음.

그렇다고 DAMP가 반드시 옳은 것은 아니고 보완해주는 개념.

핵심은 서술적이고 의미있게 하는 방향으로 이루어 져야한다는 것.


@Test
public void shouldAllowMultipleUsers() {
    List < User > users = createUsers(false, false);
    Forum forum = createForumAndRegisterUsers(users);
    validateForumAndUsers(forum, users);
}

@Test
public void shouldNotAllowBannedUsers() {
        List < User > users = createUsers(true);
        Forum forum = createForumAndRegisterUsers(users);
        validateForumAndUsers(forum, users);
}

// 중간 코드 생략...

private static List < User > createUsers(boolean...banned) {
    List < User > users = new ArrayList < > ();
    for(boolean isBanned: banned) {
        users.add(newUser().setState(isBanned ? State.BANNED : State.NORMAL).build());
    }
    return users;
}

private static Forum createForumAndRegisterUsers(List < User > users) {
    Forum forum = new Forum();
    for(User user: users) {
        try {
            forum.register(user);
        } catch(BannedUserException ignored) {}
    }
    return forum;
}

private static void validateForumAndUsers(Forum forum, List < User > users) {
    assertThat(forum.isReachable()).isTrue();
    for(User user: users) {
        assertThat(forum.hasRegisteredUser(user)).isEqualTo(user.getState() == State.BANNED);
    }
}
 


@Test
public void shouldAllowMultipleUsers() {
    User user1 = newUser().setState(State.NORMAL).build();
    User user2 = newUser().setState(State.NORMAL).build();

    Forum forum = new Forum();
    forum.register(user1);
    forum.register(user2);

    assertThat(forum.hasRegisteredUser(user1)).isTrue();
    assertThat(forum.hasRegisteredUser(user2)).isTrue();
}

@Test
public void shouldNotRegisterBannedUsers() {
    User user = newUser().setState(State.BANNED).build();

    Forum forum = new Forum();
    try {
        forum.register(user);
    } catch(BannedUserException ignored) {}

    assertThat(forum.hasRegisteredUser(user)).isFalse();
}
 
