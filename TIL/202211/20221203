# 빈 생명주기 콜백

초기화 콜백: 빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출

소멸전 콜백: 빈이 소멸되기 직전에 호출

스프링 빈의 이벤트 라이프사이클

“스프링 컨테이너 생성” → “스프링 빈 생성(생성자인젝션의 경우 여기서)” → “의존관계 주입” → “초기화 콜백” → “사용” → “소멸전 콜백” → “스프링 종료”

스프링은 다양한 방식의 생명주기 호출.

의문: 생성자 호출할 때 셋해주면 되지 않는가?

참고: 객체의 새성과 초기화를 분리.

- **생성자는 필수 정보(파라미터)를 받아, 메모리를 할당해서 객체를 생성하는 책임을 가짐. 반면에 초기화는 외부 커넥션을 연결하는 등 무거운 동작을 수행하는 경우가 많음. SRP원칙에 따라서 무거운 초기화 작업을 함께 진행하는 것보다 분리해주는 것이 좋음. 값 변경정도는 생성자에서 처리하는 것이 좋음.**

빈 생명주기 호출 3가지 방법

1. 초기화, 소멸 인터페이스 사용 ( 스프링 초창기에 사용해서 현재는 거의 사용하지 않음)
    - InitializengBean / afterPropertiesSet()
    - DisposableBean / destroy()
        - 스프링 전용 인터페이스이므로 스프링에 의존
        - 초기화, 소멸 메서드의 이름을 변경할 수 없음.
        - 내가 코드를 고칠 수 없는 외부라이브러리에 적용할 수 없음.
2. “@Bean”에 옵션사용
    - “@Bean(initMethod = “init”, destroyMethod = “close”)
        - 메서드 이름을 자요롭게 줄 수 있음
        - 스프링 빈이 스프링 코드에 의존하지 않음.
        - 코드가 아니라 설정 정보를 사용하기 때문에, 코드를 고칠 수 없는 외부 라이브러리에도 적용 가능.
3. “@PostConstruct”, “@PreDestroy” 사용 ( 스프링 권장 ) 
    - 최신 스프링에서 권장하는 방법
    - 패키지가 “javax.annotation.*”. 자바 표준이여서 스프링에서 종속적이지 않음.
    - 단점: 외부 라이브러리에는 적용하지 못한다는 것. 외부라이브러리의 초기화 종료시에는 “2번 사용”
