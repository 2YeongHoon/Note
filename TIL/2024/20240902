Item55. 옵셔널 반환은 신중히 하라

isPresent

isPresent는 옵셔널 객체 내부의 값이 있는 경우 true, 없는 경우 false를 리턴한다. 
이 메서드는 원하는 모든 작업을 수행할 수 있지만 신중히 사용해야 한다. 
위에 언급한 메서드들로 대부분 대체할 수 있으며, 그렇게 하는 것이 더 짧고 명확한 용법에 맞는 코드가 된다.
따라서 isPresent를 사용하기보다는 fliter, map, flatMap, ifPresent로 대체해 사용하자.

Optional을 사용하면 안 되는 경우(안티 패턴)

1. 컬렉션, 스트림, 배열, 옵셔널 같은 컨테이너 타입은 옵셔널로 감싸면 안 된다.
예를 들어, Optional<List<T>>를 반환하기보다는 빈 List<T>를 반환하는 게 좋다. 빈 컨테이너를 반환하면 클라이언트에 옵셔널 처리 코드를 넣지 않아도 된다.

2. 박싱 된 기본 타입을 담은 옵셔널을 반환하면 안 된다.
박싱 된 기본 타입을 담는 옵셔널은 기본 타입 자체보다 무거울 수 밖에 없다. 따라서 자바 API는 int, long, double 전용 옵셔널을 제공한다.

바로 OptionalInt, OptionalLong, OptionalDouble이다. 이렇게 대체제까지 존재하니 박싱된 기본 타입을 담은 옵셔널을 반환하는 일은 없도록 하자.

3. Optional을 컬렉션의 키, 값, 원소나 배열 원소로 사용하지 말자
Optional을 맵의 값으로 사용하면 절대 안 된다. 만약 사용한다면 Map안에 키가 없다는 사실을 나타내기 모호한 상황이 발생한다.

Key 자체가 없는 경우
Key는 있지만 속이 빈 Optional인 경우
쓸데없이 복잡성만 높아지고 혼란과 오류 가능성만 키울 뿐이니 절대 사용하지 말자.
